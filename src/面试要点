1. 算法
红黑树的基本原理：二叉查找树，2-3查找树，平衡二叉树，红黑树
    平衡树：空树，或者其左右子树的高度差的绝对值不超过1；
BubbleSort与InsertSort区别
QuickSort与MergeSort 区别
稳定的排序算法：插入排序, 归并排序...

2. Java基础
Java类对象的初始化
    初始化顺序
        当实例化对象时，对象锁再累的所有成员变量首先要进行初始化；
        只有当所有类的字段完成初始化之后，才会调用对象所在类的构造函数以创建对象；
        (类中的static代码块???)
    初始化原则
        静态对象(变量)优先于非静态对象(变量)初始化；
        静态对象只初始化一次，非静态对象可能初始化多次；
        父类优先于子类进行初始化；
        按照字段的定义顺序进行初始化；
    加载顺序
        父类：静态变量、static语句块
        子类：静态变量、static语句块
        父类：实例变量、普通语句块
        父类：构造函数
        子类：实例变量、普通语句块
        子类：构造函数
反射
    当我们的程序运行时，需要动态地加载一些类，这些类可能之前用不到所以不用加载到JVM，而在运行时才需要加载；
    反射允许运行中的Java程序获取自身的信息，可以操作类或对象的内部属性；
深拷贝、浅拷贝
    浅拷贝: 被复制对象的所有变量都含有于原来的对象相同的值；浅拷贝仅仅复制所拷贝的对象，不复制该对象所引用的对象；
    深拷贝: 对基本数据类型进行值传递；对引用数据类型，创建一个新的对象，并复制其内容；
字符串常量池
  Java创建字符串对象有两种形式
    //JVM为了减少字符串对象的重复创建，维护了一个特殊的内存：字符串常量池(字符串字面量池)
    //若直接比较两个字符串变量，则比较的是字符串变量指向的内存地址
    字面量形式
      JVM首先检查该字面量，是否在字符串常量池中存在相同内容的字符串对象的引用；
      若存在，返回该引用；
    new形式
      new出来的对象不会放到字符串常量池中，引用所指向的内存地址不同
transient关键字
  一个对象只要实现了 Serializable 接口，这个对象就可以被序列化；
  实现 Serializable 接口，将不需要序列化的属性前添加关键字transient，序列化对象的时候，这个属性就不会序列化到指定的目的地中。

3. 面向对象开发的基本原则
单一职责：一个类应该只有一个引起它变化的原因；
里氏替换：任何时候子类型能够替换其父类型；子类一定增加父类的能力
依赖倒置：要依赖于抽象，不要依赖于具体的类；
接口隔离：接口要小而专；接口表示能力，一个接口应该只用来描述一种能力；
最少知识原则：一个对象应当对其他对象有尽可能少的了解；
开闭原则：软件实体应当对扩展开放，对修改关闭；

4. Java集合框架: 接口与类
Vector：其实现与ArrayList类似，但是是线程同步的；
HashSet：线程不同步的；
    内部使用HashMap进行数据存储，集合元素可以为Null；
Hashtable：线程安全的；不能存储Null值的key或value；
HashMap：线程不同步的；
    当发生Hash冲突时，采用拉链法(链地址法)；
    当单个桶中元素个数大于8时，链表改为红黑树；
    当元素个数小于6时，链表实现；
    在并发的多线程使用场景中，使用HashMap可能导致死循环；
HashMap与Hashtable区别
    Hashtable使用synchronized进行同步；
    HashMap是线程不安全的，在并发环境下扩容时可能形成环状链表；
    Hashtable给get/put的相关操作加synchronized关键字，在多线程访问时，只要有线程访问或操作该对象，则其他线程只能阻塞；
ConcurrentHashMap
    "分段锁"策略:ConcurrentHashMap采用分段锁，每个分段锁维护着多个桶(HashEntry), 多个线程可以同时访问不同分段锁上的桶；
    则：并发度意味着Segment(继承自ReentrantLock可重入锁)的个数；

5. Java并发编程
Java实现多线程的三种方式
    实现Runnable接口
        避免单继承带来的局限性；
    实现Callable接口
        实现call()方法，线程执行完毕后会有返回值；
    继承Thread类
        继承Thread类和实现Runnable接口启动线程都是使用start()方法，然后JVM将该线程放到就绪队列中；
Executor线程池框架
    线程池：事先创建若干个可执行的线程放入一个容器池中，需要的时候从池中获取线程(不用自行创建)，使用完毕后不需要销毁线程(放回池中)，从而减少创建和销毁线程对象的开销；
Thread.sleep()与Thread.yield()
    Thread.yield()说明当前线程已经完成了生命周期最重要的部分，可以切换给其他线程来执行；
    建议具有相同优先级的其他线程可以运行；
线程可以处于阻塞状态：
    当线程执行Thread.sleep()；
    当线程执行到wait()方法；
    线程阻塞与I/O
    等待后去某个对象锁的排他性访问权限；

6. Java Memory Model
Java内存模型
主内存与工作内存
    处理器上的寄存器的读写速度比内存快很多，为了解决这个问题，引入了高速缓存；
    引入高速缓存带来了一个新问题：缓存一致性问题(如果多个缓存共享同一块主内存区域，那么多个缓存的数据可能不一致)
    所有变量都存储在主内存中，每个线程还有自己的工作内存；
    工作内存存储在高速缓存或寄存器中，保存了该线程使用的变量的主内存副本；
    线程只能直接操作自己的工作内存中的变量，不同线程站之间的变量值传递需要通过主内存来完成；
内存模型的特性
    原子性
    可见性
    有序性
volatile与synchronized区别
    synchronized保证可见性与原子性
    volatile只能修饰变量，只保证原子性
内存泄漏与内存溢出
    内存泄漏(OutOfMemory)：无用对象(不再使用的对象)持续占有内存或无用对象的内存得不到及时释放，从而造成内存空间的浪费；
    //内存泄漏的原因：长生命周期的对象持有短生命周期对象的引用
    内存溢出；程序运行过程中无法申请到足够的内存；

7. Java虚拟机