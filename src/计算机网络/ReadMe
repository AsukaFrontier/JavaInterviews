1. 《图解TCP/IP》
2. 《网络是怎样连接的》
3. OSI参考模型
  应用层
  表示层
  会话层
  传输层: TCP
  网络层: IP
  数据链路层
  物理层
4. TCP建立连接的3次握手与断开连接的4次挥手
  情境：客户端向服务端建立连接、收发数据、断开连接
  建立连接：
    1st握手：
      客户端先创建一个包含表示开始数据收发操作的控制信息的头部，将首部中的控制位的SYN设为1；
      当TCP头部创建号之后，接下来TCP模块会将信息传递给IP模块；
    2nd握手：
      服务器上的IP模块会将接收到的数据传递给其TCP模块；服务器上的TCP模块根据TCP头部信息找到端口号对应的套接字；
      找到套接字后套接字中会写入相应的信息，将状态改为正在连接；
      上述操作完成后，服务器上的TCP模块会返回响应，需要在TCP头部中设置发送方和接收方端口号以及SYN；
      在返回响应时还需要将ACK控制位设为1，表示已收到相应的网络包；
    3rd握手：
      (刚才服务器返回相应时将ACK设置为1)客户端需要将ACK设置为1并返回给服务器；
      当服务器收到这个返回包时，连接操作正式完成；
  收发数据：
    //--//
  断开连接：
    //--//

5. 为什么3rd握手存在？
  为了防止已经失效的连接请求报文段突然又传回服务器而产生错误：
    一种可能存在的异常情况：
      客户端发出的第一个连接请求报文段并未丢失，只是在某些网络结点长时间滞留，以至于延误到连接释放以后的某个时间点才到达服务端；
      本来这个请求已经失效，但是服务端收到此失效的连接请求报文段后，误认为这是客户端又发出了一次新的连接请求；
      于是服务端又向客户端发出请求报文段，同一建立连接；
      假如不采用三次握手，那么只要服务端发出确认，连接就建立了；
      由于现在客户端并未发出连接建立的请求，因此不会理会服务端的确认，但是服务端一维新的传输连接已经建立，并一直等待客户端发来数据，这样服务端的资源则处于浪费状态；
    采用三次握手可以避免上述现象的发生：
      在上述情况中，客户端不向服务器的发出请求确认，服务端由于收不到确认，就知道客户端并未要求建立连接；
